<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Meals - HealthyLife</title>
  <link rel="stylesheet" type="text/css" href="css/meals.css" />
  <link rel="stylesheet" type="text/css" href="css/header.css" />
  <link rel="stylesheet" type="text/css" href="css/footer.css" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div id="page">
    <%- include('../partial/header') %>
    
    <div id="content">
      <!-- כפתור לפתיחת המודאל -->
      <button id="addMealButton" style="display:none;">Add Meal</button>

      <!-- סינון לפי טווח תאריכים -->
      <div class="filter-section">
        <% if (username) { %>
          <form id="filter" action="/meals/filterMeals" method="POST">
              <div class="form-group">
                  <label for="startDate">Start Date:</label>
                  <input type="date" id="startDate" name="startDate">
              </div>
              <div class="form-group">
                  <label for="endDate">End Date:</label>
                  <input type="date" id="endDate" name="endDate">
              </div>
              <button type="submit">Filter</button>
          </form>
        <% } %>
        
      </div>
      <div id="chart" style="<%= meals && meals.length > 0 ? 'display: block;' : 'display: none;' %>">
        <h3>
            <span>Actual Blood Glucose Levels</span> and 
            <span>Predicted Blood Glucose Levels</span>
        </h3>
        <div class="chart-container">
            <canvas id="glucoseChart"></canvas>
        </div>
    </div>
    
      
      

      <!-- מודאל להוספת ארוחה -->
      <div id="mealModal" class="modal" style="display: none;">
        <div class="modal-content">
          <span class="close-button">&times;</span>
          <h2>Add New Meal</h2>
          <form id="mealForm" enctype="multipart/form-data" action="meals/addMeal" method="POST">
            <div class="form-group">
              <label for="mealType">Meal Type:</label>
              <select id="mealType" name="mealType" required>
                <option value="breakfast">Breakfast</option>
                <option value="lunch">Lunch</option>
                <option value="dinner">Dinner</option>
              </select>
            </div>
            <div class="form-group">
              <label for="descriptionImage">Upload Image:</label>
              <input type="file" id="descriptionImage" name="descriptionImage" accept="image/jpeg" required>
            </div>
            <div class="form-group">
              <label for="date">Date:</label>
              <input type="date" id="date" name="date" required>
            </div>
            <div class="form-group">
              <label for="BloodSugarLevel">Blood Sugar Level (after meal):</label>
              <input type="number" id="BloodSugarLevel" name="BloodSugarLevel" step="0.1" min="0" required>
            </div>
            <button type="submit">Submit Meal</button>
          </form>          
        </div>
      </div>

      <!-- הודעה אם אין משתמש מחובר -->
      <div id="noHistoryMessage" class="no-history-message" style="display:none;">
        No meals history, need to connect.
      </div>

      <!-- טבלה להארוחות -->
      <table id="mealTable" style="<%= meals && meals.length > 0 ? 'display: table;' : 'display: none;' %>">
        <thead>
          <tr>
            <th style="display: none;">Username</th>
            <th>Meal Type</th>
            <th>Date</th>
            <th>Description</th>
            <th>Glucose level in the food</th>
            <th>Glucose level in blood after meal</th>
            <th>Holiday</th>
          </tr>
        </thead>
        <tbody>
          <% if (meals && meals.length > 0) { %>
            <% meals.forEach(function(meal) { %>
              <tr>
                <td style="display: none;"><%= meal.username %></td>
                <td><%= meal.mealType %></td>
                <td><%= meal.date.split('T')[0] %></td>
                <td><%= meal.description || 'No description' %></td>
                <td><%= meal.glucoseLevel %></td>
                <td><%= meal.BloodSugarLevel %></td>
                <td><%= meal.holiday %></td>
              </tr>
            <% }); %>
          <% } else { %>
            <tr>
              <td colspan="6" style="text-align:center;">No meals available.</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <%- include('../partial/footer') %> 
  </div>

  <script>
    // 🎯 משתנים כלליים
    const addMealButton = document.getElementById('addMealButton');
    const mealModal = document.getElementById('mealModal');
    const closeButton = document.querySelector('.close-button');
    const mealTable = document.getElementById('mealTable');
    const noHistoryMessage = document.getElementById('noHistoryMessage');
    const filterMeals = document.getElementById('filter');
    const username = '<%= username || "" %>';

    if (username) {
        mealTable.style.display = "table";
        addMealButton.style.display = "block";
        noHistoryMessage.style.display = "none";
    } else {
        mealTable.style.display = "none";
        addMealButton.style.display = "none";
        noHistoryMessage.style.display = "block";
    }

    // ✅ פתיחת מודאל
    addMealButton.onclick = () => mealModal.style.display = "block";
    closeButton.onclick = () => mealModal.style.display = "none";
    window.onclick = (event) => {
        if (event.target === mealModal) mealModal.style.display = "none";
    };

    // 🎯 נתונים לגרף
    const bloodSugarData = [];
    const predictionData = [];
    const dateLabels = [];
    document.querySelectorAll('#mealTable tbody tr').forEach(row => {
        dateLabels.push(new Date(row.cells[2].textContent).toLocaleDateString('en-GB'));
        bloodSugarData.push(parseFloat(row.cells[5].textContent.trim())); // שימוש ב-BloodSugarLevel (עמודה 6)
    });

    fetch('/meals/predictGlucose')
        .then(response => response.json())
        .then(data => {
            if (data && Array.isArray(data.predictions)) {
                predictionData.push(...data.predictions);
            }

            // התאמת אורך המערכים
            if (predictionData.length !== bloodSugarData.length) {
                console.warn('Mismatch in data length! Adjusting arrays.');
                while (predictionData.length < bloodSugarData.length) {
                    predictionData.push(null); // הוספת ערך ריק אם יש חוסר
                }
            }

            console.log('Prediction Data:', predictionData);

            new Chart(document.getElementById('glucoseChart'), {
                type: 'line',
                data: {
                    labels: dateLabels,
                    datasets: [
                        { 
                            label: 'Blood Sugar Level (after meal)', 
                            data: bloodSugarData, 
                            borderColor: '#6A0DAD', // סגול
                            fill: false 
                        },
                        { 
                            label: 'Predicted Blood Sugar Level', 
                            data: predictionData, 
                            borderColor: '#FF69B4', // ורוד
                            borderDash: [5, 5],
                            fill: false 
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Blood Sugar Level'
                            }
                        }
                    }
                }
            });
        })
        .catch(error => console.error('Error fetching prediction data:', error));
</script>
</body>
</html>
